<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<!-- 开启注解扫描 -->
	<context:annotation-config/>
	
	<!-- 需要扫描注解的路径-->
	<context:component-scan base-package="com.ld"/>
	
	<!-- 如果感觉Spring MVC的配置多，可以写另外一个配置文件中，最后在spring的配置文件中引入即可 -->
	<import resource="SpringMVC.xml"/>

	<!--<import resource="redisConfig.xml"/>-->
	<import resource="redisConfig.xml"/>

	
	<!-- 导入占位符配置文件location：配置文件地址，可以使用前缀-->
	<context:property-placeholder location="classpath:*.properties"/>

	<!-- 配置连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.pass}" />
	</bean>

	<!-- 配置JNDI连接池 -->
	<!--<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">-->
	<!--<property name="jndiName" value="java:comp/env/jndi/jdbc"/>-->
	<!--</bean>-->

	
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/><!-- 引入mybatis的配置文件-->
		<property name="typeAliasesPackage" value="com.ld.domain"/><!-- 配置哪个包使用别名 -->
		<property name="mapperLocations" value="classpath:com/ld/mapper/*Mapper.xml"/><!-- 引入mapper的配置文件-->
	</bean>
	
	<!-- 配置自动扫描mapper-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ld.mapper"/>
		<!-- 扫描这个包中所有的mapper，帮我们实例化成了一个一个具体的mapper对象，然后把这个mapper对象扔给Spring去管理 -->
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 配置事务切面 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.ld.service.*Service.*(..))" id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
	
	<!-- 配置事务的属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="list*" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
</beans>

